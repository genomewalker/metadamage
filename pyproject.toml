[tool.poetry]
name = "metadamage"
version = "0.0.0"
description = "Metagenomics Ancient Damage: metadamage"
authors = ["Christian Michelsen <christianmichelsen@gmail.com>"]
license = "MIT"
keywords = ['metadamage', 'metagenomics', 'ancient damage', 'DNA damage']
repository = "https://github.com/ChristianMichelsen/metadamage"
readme = "README.md"
include = ["metadamage/style.mplstyle", 'pyproject.toml']
exclude = ["logs/log*"]


[tool.poetry.dependencies]
python = "^3.8"
pip = "^20.3.3"
numpyro = "^0.4.1"
pandas = "^1.2.0"
matplotlib = "^3.3.3"
fsspec = "^0.8.5"
dill = "^0.3.3"
PyPDF2 = "^1.26.0"
joblib = "^1.0.0"
pyarrow = "^2.0.0"
rich = "^9.8.1"
typer = {extras = ["all"], version = "^0.3.2"}
click-help-colors = "^0.9"
poetry-dynamic-versioning = "^0.12.1"
about-time = "^3.1.1"
memory-profiler = "^0.58.0"
plotly = "^4.14.3"
dash = "^1.19.0"
notebook = ">=5.3"
ipywidgets = ">=7.5"
jupyterlab = "^3.0.7"
dash-bootstrap-components = "^0.11.3"
lazy-object-proxy = "1.4.3"
ete3 = "^3.1.2"
partd = "^1.1.0"
timeout-decorator = "^0.5.0"
dask = {version = "^2021.3.0", extras = ["complete"]}


[tool.poetry.dev-dependencies]
pytest = "^4.6"
flake8 = "^3.8.4"
ipykernel = "^5.4.3"
black = {version = "^20.8b1", allow-prereleases = true}
pylint = "^2.6.0"
pytest-cov = "^2.11.0"
isort = "^5.7.0"
coverage = "^5.3.1"
about-time = "^3.1.1"
poethepoet = "^0.9.0"
bokeh = "^2.2.3"
memory-profiler = "^0.58.0"
tables = "^3.6.1"
h5py = "^3.1.0"
arviz = "^0.11.0"

[tool.poetry.scripts]
metadamage = "metadamage.cli:cli_main"

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
test   = "pytest ."
isort = "isort ."
format = "black ."
black = ["format"]
clean = """
# Multiline commands including comments work too. Unescaped whitespace is ignored.
rm -rf .coverage
       .mypy_cache
       .pytest_cache
       metadamage/logs/*
       dist
       ./**/__pycache__
"""
build = "poetry build"
_publish = "poetry publish"
_git_push_with_tags = "git push --follow-tags"
git_release = ["_git_push_with_tags"]

lint = ["isort", "black"]
test_and_lint = ["test", "lint"]

# poe release
release = ["test", "isort", "black", "clean", "build", "_publish", "git_release"]
publish = ['release']



[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.isort]
profile = "black"
# The multi-line import statement style (integer code).
multi_line_output = 3
# explicitly defined source path
src_paths = ["metadamage", "test"]
# Format import statements as a visually-balanced grid?
balanced_wrapping = true
# Maximum length (columns) for a line of program code.
line_length = 88
# Add a trailing comma on the list of ‘from’ import names?
include_trailing_comma = true
# Number of blank lines to separate imports from following statements.
lines_after_imports = 2
# For continuation lines, wrap lines in parenthesis?
use_parentheses = true
# Combine an ‘import … as …’ onto the same line?
combine_as_imports = true
# Non-indented imports float to the top of the file
float_to_top = true
# have "import foo" next to "from foo import bar"
force_sort_within_sections = true
# alphabetical sort within section
force_alphabetical_sort_within_sections = true

# Names of sections that group import statements.
# The order in this sequence specifies the order the sections should appear.
import_heading_stdlib="Standard Library"
import_heading_firstparty="First Party"
import_heading_thirdparty="Third Party"
import_heading_localfolder="Local Folder"
import_heading_base="Scientific Library"

# known libraries
known_first_party="metadamage"
known_base = ['numpy', 'pandas', 'matplotlib', 'scipy'] # extra_standard_library
sections = "FUTURE,BASE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

# # Force ‘from’ imports to be grid wrapped regardless of line length?
# force_grid_wrap = 2